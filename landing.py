# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'landing.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


import os
import cv2
from cv2 import imread
from cv2 import rectangle
import numpy as np
from skimage.morphology import erosion, disk
from mtcnn.mtcnn import MTCNN
from cv2 import rectangle
import pickle
from tensorflow.keras.models import load_model


from PyQt5 import QtCore, QtGui, QtWidgets
from PIL import Image, ImageQt
from comparision import Ui_comparision


class Ui_Main(object):
    file_path = ""
    roi, eroded, subtracted, detect = [], [], [], []
    classifierName, classifierAccuracy, classifierClass = [], [], []
    ml_rawImages, cnn_rawImages = [], []

    def setupUi(self, Main):
        Main.setObjectName("Main")
        Main.resize(888, 721)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Main.sizePolicy().hasHeightForWidth())
        Main.setSizePolicy(sizePolicy)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon2.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Main.setWindowIcon(icon)
        Main.setStyleSheet("background-color: rgb(61, 61, 61);")
        Main.setToolButtonStyle(QtCore.Qt.ToolButtonTextOnly)
        self.centralwidget = QtWidgets.QWidget(Main)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(50, 10, 801, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.labelpath = QtWidgets.QLabel(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(35)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.labelpath.sizePolicy().hasHeightForWidth())
        self.labelpath.setSizePolicy(sizePolicy)
        self.labelpath.setSizeIncrement(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.labelpath.setFont(font)
        self.labelpath.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"border-radius:40px;\n"
"\n"
"font: 12pt \"Calibri\";\n"
"color: rgb(0, 0, 0);\n"
"background-color: rgb(186, 186, 186);\n"
"\n"
"")
        self.labelpath.setLineWidth(1)
        self.labelpath.setText("")
        self.labelpath.setTextFormat(QtCore.Qt.AutoText)
        self.labelpath.setScaledContents(False)
        self.labelpath.setIndent(25)
        self.labelpath.setObjectName("labelpath")
        self.horizontalLayout.addWidget(self.labelpath)
        self.buttonselect = QtWidgets.QPushButton(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(10)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.buttonselect.sizePolicy().hasHeightForWidth())
        self.buttonselect.setSizePolicy(sizePolicy)
        self.buttonselect.setStyleSheet("QPushButton{\n"
"    font: 14pt \"Calibri\";\n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(170, 85, 0);\n"
"    background-color: rgb(202, 101, 0);\n"
"    border-radius:30px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    color: rgb(61, 61, 61);\n"
"    background-color: rgb(238, 238, 238);\n"
"    background-color: rgb(0, 175, 0);\n"
"}\n"
"")
        self.buttonselect.setObjectName("buttonselect")
        self.horizontalLayout.addWidget(self.buttonselect)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(60, 400, 238, 181))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.box1 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.box1.setStyleSheet("font: 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);")
        self.box1.setChecked(False)
        self.box1.setObjectName("box1")
        self.verticalLayout.addWidget(self.box1)
        self.box2 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.box2.setStyleSheet("font: 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);")
        self.box2.setObjectName("box2")
        self.verticalLayout.addWidget(self.box2)
        self.box3 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.box3.setStyleSheet("font: 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);")
        self.box3.setObjectName("box3")
        self.verticalLayout.addWidget(self.box3)
        self.box4 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.box4.setStyleSheet("font: 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);")
        self.box4.setObjectName("box4")
        self.verticalLayout.addWidget(self.box4)
        self.box5 = QtWidgets.QCheckBox(self.verticalLayoutWidget)
        self.box5.setStyleSheet("font: 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);")
        self.box5.setObjectName("box5")
        self.verticalLayout.addWidget(self.box5)
        self.buttoncompare = QtWidgets.QPushButton(self.centralwidget)
        self.buttoncompare.setGeometry(QtCore.QRect(70, 620, 171, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(10)
        sizePolicy.setHeightForWidth(self.buttoncompare.sizePolicy().hasHeightForWidth())
        self.buttoncompare.setSizePolicy(sizePolicy)
        self.buttoncompare.setStyleSheet("QPushButton{\n"
"    font: 18pt \"Calibri\";\n"
"    color: rgb(0, 0, 0);\n"
"    font: italic 18pt \"Times New Roman\";\n"
"\n"
"    background-color: rgb(68, 204, 204);\n"
"\n"
"    border-radius:30px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    color: rgb(61, 61, 61);\n"
"    background-color: rgb(255, 170, 127);\n"
"\n"
"}\n"
"")
        self.buttoncompare.setObjectName("buttoncompare")
        self.buttonanalyze = QtWidgets.QPushButton(self.centralwidget)
        self.buttonanalyze.setGeometry(QtCore.QRect(440, 620, 311, 41))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(10)
        sizePolicy.setHeightForWidth(self.buttonanalyze.sizePolicy().hasHeightForWidth())
        self.buttonanalyze.setSizePolicy(sizePolicy)
        self.buttonanalyze.setStyleSheet("QPushButton{\n"
"    font: 18pt \"Calibri\";\n"
"    color: rgb(0, 0, 0);\n"
"    font: italic 18pt \"Times New Roman\";\n"
"\n"
"    background-color: rgb(68, 204, 204);\n"
"\n"
"    border-radius:30px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    color: rgb(61, 61, 61);\n"
"    background-color: rgb(255, 170, 127);\n"
"\n"
"}\n"
"")
        self.buttonanalyze.setObjectName("buttonanalyze")
        self.photo1 = QtWidgets.QLabel(self.centralwidget)
        self.photo1.setGeometry(QtCore.QRect(180, 60, 241, 271))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.photo1.sizePolicy().hasHeightForWidth())
        self.photo1.setSizePolicy(sizePolicy)
        self.photo1.setText("")
        self.photo1.setPixmap(QtGui.QPixmap("image2.jpg"))
        self.photo1.setScaledContents(True)
        self.photo1.setAlignment(QtCore.Qt.AlignCenter)
        self.photo1.setObjectName("photo1")
        self.photo2 = QtWidgets.QLabel(self.centralwidget)
        self.photo2.setGeometry(QtCore.QRect(470, 60, 241, 271))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.photo2.sizePolicy().hasHeightForWidth())
        self.photo2.setSizePolicy(sizePolicy)
        self.photo2.setText("")
        self.photo2.setPixmap(QtGui.QPixmap("image2.jpg"))
        self.photo2.setScaledContents(True)
        self.photo2.setAlignment(QtCore.Qt.AlignCenter)
        self.photo2.setObjectName("photo2")
        self.title1 = QtWidgets.QLabel(self.centralwidget)
        self.title1.setGeometry(QtCore.QRect(180, 350, 241, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title1.sizePolicy().hasHeightForWidth())
        self.title1.setSizePolicy(sizePolicy)
        self.title1.setStyleSheet("font: italic 14pt \"Times New Roman\";\n"
"color: rgb(255, 255, 255);")
        self.title1.setAlignment(QtCore.Qt.AlignCenter)
        self.title1.setIndent(0)
        self.title1.setObjectName("title1")
        self.title2 = QtWidgets.QLabel(self.centralwidget)
        self.title2.setGeometry(QtCore.QRect(470, 350, 241, 21))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.title2.sizePolicy().hasHeightForWidth())
        self.title2.setSizePolicy(sizePolicy)
        self.title2.setStyleSheet("font: italic 14pt \"Times New Roman\";\n"
"color: rgb(255, 255, 255);")
        self.title2.setAlignment(QtCore.Qt.AlignCenter)
        self.title2.setIndent(3)
        self.title2.setObjectName("title2")
        self.gridLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(330, 400, 521, 181))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.outputselector = QtWidgets.QComboBox(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(50)
        sizePolicy.setVerticalStretch(10)
        sizePolicy.setHeightForWidth(self.outputselector.sizePolicy().hasHeightForWidth())
        self.outputselector.setSizePolicy(sizePolicy)
        self.outputselector.setStyleSheet("border-color: rgb(0, 0, 0);\n"
"border-radius:40px;\n"
"\n"
"font: 12pt \"Calibri\";\n"
"color: rgb(0, 0, 0);\n"
"background-color: rgb(186, 186, 186);\n"
"\n"
"")
        self.outputselector.setObjectName("outputselector")
        self.outputselector.addItem("")
        self.outputselector.addItem("")
        self.outputselector.addItem("")
        self.outputselector.addItem("")
        self.outputselector.addItem("")
        self.outputselector.addItem("")
        self.outputselector.addItem("")
        self.gridLayout.addWidget(self.outputselector, 1, 0, 1, 1)
        self.buttonview = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(20)
        sizePolicy.setVerticalStretch(12)
        sizePolicy.setHeightForWidth(self.buttonview.sizePolicy().hasHeightForWidth())
        self.buttonview.setSizePolicy(sizePolicy)
        self.buttonview.setStyleSheet("QPushButton{\n"
"    font: 14pt \"Calibri\";\n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(170, 85, 0);\n"
"    background-color: rgb(202, 101, 0);\n"
"    background-color: rgb(255, 85, 0);\n"
"    border-radius:30px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    color: rgb(61, 61, 61);\n"
"    background-color: rgb(238, 238, 238);\n"
"    background-color: rgb(0, 175, 0);\n"
"}\n"
"")
        self.buttonview.setObjectName("buttonview")
        self.gridLayout.addWidget(self.buttonview, 1, 1, 1, 1)
        self.sentiment = QtWidgets.QLabel(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(40)
        sizePolicy.setHeightForWidth(self.sentiment.sizePolicy().hasHeightForWidth())
        self.sentiment.setSizePolicy(sizePolicy)
        self.sentiment.setStyleSheet("background-color: rgb(75, 75, 75);\n"
"font: 16pt \"Calibri\";\n"
"color: rgb(255, 255, 255);")
        self.sentiment.setAlignment(QtCore.Qt.AlignCenter)
        self.sentiment.setIndent(0)
        self.sentiment.setObjectName("sentiment")
        self.gridLayout.addWidget(self.sentiment, 0, 0, 1, 2)
        self.buttonreset = QtWidgets.QPushButton(self.gridLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(18)
        sizePolicy.setHeightForWidth(self.buttonreset.sizePolicy().hasHeightForWidth())
        self.buttonreset.setSizePolicy(sizePolicy)
        self.buttonreset.setStyleSheet("QPushButton{\n"
"    font: 14pt \"Calibri\";\n"
"    color: rgb(255, 255, 255);\n"
"    background-color: rgb(170, 85, 0);\n"
"    background-color: rgb(202, 101, 0);\n"
"    border-radius:30px;\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"    color: rgb(61, 61, 61);\n"
"    background-color: rgb(238, 238, 238);\n"
"    background-color: rgb(0, 175, 0);\n"
"}\n"
"")
        self.buttonreset.setObjectName("buttonreset")
        self.gridLayout.addWidget(self.buttonreset, 2, 0, 1, 2)
        Main.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Main)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 888, 25))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(12)
        self.menubar.setFont(font)
        self.menubar.setAcceptDrops(True)
        self.menubar.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.menubar.setStyleSheet("background-color: rgb(70, 70, 70);\n"
"color: rgb(255, 255, 255);\n"
"selection-color: rgb(255, 255, 0);\n"
"alternate-background-color: rgb(170, 255, 0);")
        self.menubar.setDefaultUp(False)
        self.menubar.setNativeMenuBar(True)
        self.menubar.setObjectName("menubar")
        self.bar_file = QtWidgets.QMenu(self.menubar)
        self.bar_file.setGeometry(QtCore.QRect(269, 129, 135, 116))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bar_file.sizePolicy().hasHeightForWidth())
        self.bar_file.setSizePolicy(sizePolicy)
        self.bar_file.setMouseTracking(True)
        self.bar_file.setAcceptDrops(True)
        self.bar_file.setToolTipDuration(-1)
        self.bar_file.setStyleSheet("QMenu:hover{\n"
"color: rgb(0, 0, 0);\n"
"}\n"
"")
        self.bar_file.setTearOffEnabled(False)
        self.bar_file.setSeparatorsCollapsible(False)
        self.bar_file.setObjectName("bar_file")
        self.bar_shortcut = QtWidgets.QMenu(self.menubar)
        self.bar_shortcut.setObjectName("bar_shortcut")
        Main.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Main)
        self.statusbar.setObjectName("statusbar")
        Main.setStatusBar(self.statusbar)
        self.actionasd_2 = QtWidgets.QAction(Main)
        self.actionasd_2.setObjectName("actionasd_2")
        self.bar_reset = QtWidgets.QAction(Main)
        self.bar_reset.setObjectName("bar_reset")
        self.bar_exit = QtWidgets.QAction(Main)
        self.bar_exit.setObjectName("bar_exit")
        self.bar_newfile = QtWidgets.QAction(Main)
        self.bar_newfile.setStatusTip("")
        self.bar_newfile.setShortcutContext(QtCore.Qt.WidgetWithChildrenShortcut)
        self.bar_newfile.setObjectName("bar_newfile")
        self.bar_file.addAction(self.bar_newfile)
        self.bar_file.addAction(self.bar_reset)
        self.bar_file.addAction(self.bar_exit)
        self.menubar.addAction(self.bar_file.menuAction())
        self.menubar.addAction(self.bar_shortcut.menuAction())

        self.retranslateUi(Main)
        QtCore.QMetaObject.connectSlotsByName(Main)

        ###  This portion is written by the coder to connect buttons with thier respected functions, this portion will works in terms of clicking particular button............................
        self.bar_newfile.triggered.connect(self.file)           ##  for "File" option from manu.
        self.bar_reset.triggered.connect(self.reset)           ##  for "Reset" option from manu.
        self.bar_exit.triggered.connect(self.exit)            ##  for "Exit" option from manu.

        self.buttonselect.clicked.connect(self.file)            ##  for "Select" button.
        self.buttonanalyze.clicked.connect(self.main_file)          ##  for "Analyze" button.
        self.buttonreset.clicked.connect(self.reset)            ##  for "Reset" button.
        self.buttonview.clicked.connect(self.display_photo)         ##  for "View" button.
        self.buttoncompare.clicked.connect(self.connect)        ##  for "Compare" button.

    def retranslateUi(self, Main):
        _translate = QtCore.QCoreApplication.translate
        Main.setWindowTitle(_translate("Main", "Emotion classifier"))
        self.buttonselect.setText(_translate("Main", "Select"))
        self.box1.setText(_translate("Main", " CNN"))
        self.box2.setText(_translate("Main", " Logistic Regression"))
        self.box3.setText(_translate("Main", " SVM"))
        self.box4.setText(_translate("Main", " Random Forest"))
        self.box5.setText(_translate("Main", " xgBoost"))
        self.buttoncompare.setText(_translate("Main", "- Compare -"))
        self.buttonanalyze.setText(_translate("Main", "- Analyze -"))
        self.title1.setText(_translate("Main", "Original Image"))
        self.title2.setText(_translate("Main", "Dispaly"))
        self.outputselector.setItemText(0, _translate("Main", "Select an option to view pre-processing steps"))
        self.outputselector.setItemText(1, _translate("Main", "Detected Face"))
        self.outputselector.setItemText(2, _translate("Main", "ROI (Region of Interest)"))
        self.outputselector.setItemText(3, _translate("Main", "Flipped Image"))
        self.outputselector.setItemText(4, _translate("Main", "Rotated Image"))
        self.outputselector.setItemText(5, _translate("Main", "Eroded Image"))
        self.outputselector.setItemText(6, _translate("Main", "Subtracted Image"))
        self.buttonview.setText(_translate("Main", "View"))
        self.sentiment.setText(_translate("Main", ""))
        self.buttonreset.setText(_translate("Main", "Reset"))
        self.bar_file.setTitle(_translate("Main", "Menu"))
        self.bar_shortcut.setTitle(_translate("Main", ""))
        self.actionasd_2.setText(_translate("Main", "asd"))
        self.bar_reset.setText(_translate("Main", "Reset"))
        self.bar_reset.setToolTip(_translate("Main", "Reset window"))
        self.bar_reset.setShortcut(_translate("Main", "Ctrl+R"))
        self.bar_exit.setText(_translate("Main", "Exit"))
        self.bar_exit.setToolTip(_translate("Main", "Exit"))
        self.bar_exit.setShortcut(_translate("Main", "Ctrl+E"))
        self.bar_newfile.setText(_translate("Main", "New File"))
        self.bar_newfile.setToolTip(_translate("Main", "To input an image file"))
        self.bar_newfile.setShortcut(_translate("Main", "Ctrl+N"))


    ### For loading file fron loacl device........................................................................
    def file(self):
        file_path = QtWidgets.QFileDialog.getOpenFileName(caption='Open file', directory='', filter='')         ##  input an image file
        extension = file_path[0].split('.')                                        ##  split the extension from file path
        if extension[-1] in ['png', 'PNG', 'jpg', 'JPG', 'jpeg', 'JPEG']:         ##  checks extension
            self.reset()                                                    ##  reset everything when a new image loaded.
            self.file_path = file_path[0]                                        ##  set file path
            self.labelpath.setText(self.file_path)
            self.photo1.setPixmap(QtGui.QPixmap(self.file_path))
        else:                                                               ##  shows an error message if inputted file isn't an image
            warning = "Invalid file format !!!"
            message = "Please input a valid file"
            self.show_popup(warning, message)

    
    ###  To show error message in popup style..........................................................
    def show_popup(self, warning, message):                      
        msg = QtWidgets.QMessageBox()
        msg.setWindowTitle("Error!")
        msg.setText(warning)
        msg.setIcon(QtWidgets.QMessageBox.Warning)      
        msg.setDefaultButton(QtWidgets.QMessageBox.Ok)             ##  define "Ok" button                        
        msg.setInformativeText(message)                         ##  set error message 
        msg.exec_()


    ###  To show a message in terms of not detecting any face............................................
    def no_face(self):
        self.sentiment.setText("No face detected.")

    
    ###  For creating list to set comparision table.......................................................
    def make_list(self, pred, acc, name):
        self.classifierName.append(name)
        self.classifierAccuracy.append(acc)
        self.classifierClass.append(pred)

    
    ###  Fro deleting list item from the list after seting comparision table..............................
    def pop_list_item(self):
        self.classifierName.pop(0)
        self.classifierAccuracy.pop(0)
        self.classifierClass.pop(0)

    
    ### For connecting main_file() and comparision() to set comparision table..............................
    def connect(self):
        self.classifierName, self.classifierAccuracy, self.classifierClass = [], [], []         ##  set all lists into empty
        self.main_file(comparision=True)
        if len(self.classifierName) > 1:                        ##  check list length, hence user have to select at least 2 classifier
            self.connect_comparision()
            self.set_comparision()
        else:                               ## shows error message if at least 2 classifier wasn't selected.
            warning = ""
            message = "You have to select at least 2 Classifiers to see the comparision"
            self.show_popup(warning, message)
        

    ### Connect "comparision.py" to the "landing.py"...........................................
    def connect_comparision(self):
        self.comparision = QtWidgets.QWidget()
        self.ui = Ui_comparision()
        self.ui.setupUi(self.comparision)
        self.comparision.show()

    
    ### For setting up comparision table..........................................
    def set_comparision(self):                                      ##  this function sets first row of the comparision table by
        if self.classifierName != []:                               ##  "classifierName, classifierAccuracy and classifierClass" lists.
            self.ui.c1.setText(self.classifierName[0])              ##  then pop that item from list and set second row of the comparision,
            self.ui.a1.setText(self.classifierAccuracy[0])          ##  if "classifierName, classifierAccuracy and classifierClass" has any 
            self.ui.clas1.setText(self.classifierClass[0])          ##  item left.
            self.pop_list_item()
        if self.classifierName != []:
            self.ui.c2.setText(self.classifierName[0])
            self.ui.a2.setText(self.classifierAccuracy[0])
            self.ui.clas2.setText(self.classifierClass[0])
            self.pop_list_item()
        if self.classifierName != []:
            self.ui.c3.setText(self.classifierName[0])
            self.ui.a3.setText(self.classifierAccuracy[0])
            self.ui.clas3.setText(self.classifierClass[0])
            self.pop_list_item()
        if self.classifierName != []:
            self.ui.c4.setText(self.classifierName[0])
            self.ui.a4.setText(self.classifierAccuracy[0])
            self.ui.clas4.setText(self.classifierClass[0])
            self.pop_list_item()
        if self.classifierName != []:
            self.ui.c5.setText(self.classifierName[0])
            self.ui.a5.setText(self.classifierAccuracy[0])
            self.ui.clas5.setText(self.classifierClass[0])
            self.pop_list_item()
        

    ###  to convert image array into displayable image...................................................
    def convert_displayable_image(self, img):
        arraytoimage = Image.fromarray(img)                 ##  converts array into image.
        qtimage = ImageQt.ImageQt(arraytoimage)                 ##  converts image into "qtimage".
        return qtimage

    
    ###  To display images in terms of text selected by the view button.................................
    def display_photo(self):
        if np.array_equal(self.roi, []) and self.file_path != "":
            self.data()
        else:
            pass

        text = self.outputselector.currentText()
        if text == "ROI (Region of Interest)" and not np.array_equal(self.roi, []):
            self.photo2.setPixmap(QtGui.QPixmap.fromImage(self.convert_displayable_image(self.roi)))
            self.title2.setText("Region of Interest")
        elif text == "Flipped Image" and not np.array_equal(self.roi, []):
            roi_flip = cv2.flip(self.roi, 1)
            self.photo2.setPixmap(QtGui.QPixmap.fromImage(self.convert_displayable_image(roi_flip)))
            self.title2.setText("Flipped Image")
        elif text == "Rotated Image" and not np.array_equal(self.roi, []):
            roi_rotate = cv2.rotate(self.roi, cv2.cv2.ROTATE_90_CLOCKWISE)
            self.photo2.setPixmap(QtGui.QPixmap.fromImage(self.convert_displayable_image(roi_rotate)))
            self.title2.setText("Rotated Image")
        elif text == "Eroded Image" and not np.array_equal(self.eroded, []):
            self.photo2.setPixmap(QtGui.QPixmap.fromImage(self.convert_displayable_image(self.eroded)))
            self.title2.setText("Eroded Image")
        elif text == "Subtracted Image" and not np.array_equal(self.subtracted, []):
            self.photo2.setPixmap(QtGui.QPixmap.fromImage(self.convert_displayable_image(self.subtracted)))
            self.title2.setText("Subtracted Image")
        elif text == "Detected Face" and not np.array_equal(self.detect, []):
            self.photo2.setPixmap(QtGui.QPixmap.fromImage(self.convert_displayable_image(self.detect)))
            self.title2.setText("Detected Face")
        else:
            if text == "Select an option to view pre-processing steps" and not np.array_equal(self.roi, []):
                warning = ""
                message = "Select a pre-processing step."
                self.show_popup(warning, message)
            else:                    
                warning = ""
                message = "Select an input image first"
                self.show_popup(warning, message)


    ###  To exit app............................................................................
    def exit(self):
        sys.exit(app.exec_())

    
    ###  To reset screen and app.................................................................
    def reset(self):
        self.file_path = ""
        self.roi, self.eroded, self.subtracted, self.detect = [], [], [], []
        self.ml_rawImages, self.cnn_rawImages = [], []
        self.classifierName, self.classifierAccuracy, self.classifierClass = [], [], []
        
        self.labelpath.setText("")
        self.photo1.setPixmap(QtGui.QPixmap("image2.jpg"))
        self.photo2.setPixmap(QtGui.QPixmap("image2.jpg"))
        self.title2.setText("Dispaly")
        self.sentiment.setText("")
        self.outputselector.setCurrentIndex(0)
        self.box1.setChecked(False)
        self.box2.setChecked(False)
        self.box3.setChecked(False)
        self.box4.setChecked(False)
        self.box5.setChecked(False)
        self.connect_comparision()
        self.comparision.close()
    
    
    ###  To claculate accuracy.................................................................
    def confidence_level(self, confidence):
        confidence.sort()
        confidence = confidence[0][-1]*100                         ##  sets highest value from the "confidence list" to the confidence variable
        first_part,second_part = str(confidence).split('.',2)       ##  splits "confidence" for creating a float value that is limitied to 
        result = first_part +'.'+ second_part[:2] + "%"             ##  2 digits after decimal(.), like "5.201548" to "5.20"

        return result


    ###  Main function that is responsible for every thing......................................
    def main_file(self, comparision = False):
        flag = 0                                                ##  "falg" variable is used for checking "if" condition is executs or not.
        if self.box1.isChecked() and self.file_path != "":
            flag = 1
            model_cnn = load_model('model_cnn.h5')              ##  loads "cnn" model.
            category = {0:'angry', 1:'happy', 2:'sad', 3:'surprised'}       ##  sets categories into numeric value.
            self.data(cnn=True)
            if np.array_equal(self.cnn_rawImages[-1], "No Face"):
                self.no_face()
            else:                
                predi = model_cnn.predict(self.cnn_rawImages)       ## predicts all emotions.
                predict = np.argmax(predi, axis=1)
                prediction = category[predict[0]]               ##  selects final emotion.

                confidence = predi                             ##  for predicting confidence level.
                accuracy = self.confidence_level(confidence)
                name = "CNN"
                final_result = 'Image is classified as "' + prediction + '" with ' + accuracy + ' probability'+'\n using "'+ name + '"'     ##  this result will be shown in the display.
            
                self.sentiment.setText(final_result)            ## for displaying result.
                self.make_list(prediction, accuracy, name)          ##  create lists for creating comparision table 

        if self.box2.isChecked() and self.file_path != "":
            flag = 1
            with open('model_logistic_regression.pickle', 'rb') as f:
                model_lr = pickle.load(f)                                     ##  loads ML model.
            self.data(ml=True)
            if np.array_equal(self.ml_rawImages[-1], "No Face"):
                self.no_face()
            else:
                predict = model_lr.predict(self.ml_rawImages)       ##  predicts emotions.
                prediction = predict[0]
                confidence = model_lr.predict_proba(self.ml_rawImages)      ##  predicts confidence level.
                
                accuracy = self.confidence_level(confidence)
                name = 'Logistic Regression'
                final_result = 'Image is classified as "' + predict[0] + '" with ' + accuracy + ' probability'+'\n using "'+ name + '"'
                
                self.sentiment.setText(final_result)
                self.make_list(prediction, accuracy, name)

        if self.box3.isChecked() and self.file_path != "":
            flag = 1
            with open('model_svm.pickle', 'rb') as f:
                model_svm = pickle.load(f)
            self.data(ml=True)
            if np.array_equal(self.ml_rawImages[-1], "No Face"):
                self.no_face()
            else:
                predict = model_svm.predict(self.ml_rawImages)
                prediction = predict[0]
                confidence = model_svm.predict_proba(self.ml_rawImages)
                
                accuracy = self.confidence_level(confidence)
                name = 'SVM'
                final_result = 'Image is classified as "' + predict[0] + '" with ' + accuracy + ' probability'+'\n using "'+ name + '"'
                self.sentiment.setText(final_result)
                self.make_list(prediction, accuracy, name)

        if self.box4.isChecked() and self.file_path != "":
            flag = 1
            with open('model_random_forest.pickle', 'rb') as f:
                model_rf = pickle.load(f)
            self.data(ml=True)
            if np.array_equal(self.ml_rawImages[-1], "No Face"):
                self.no_face()
            else:
                predict = model_rf.predict(self.ml_rawImages)
                prediction = predict[0]
                confidence = model_rf.predict_proba(self.ml_rawImages)
                
                accuracy = self.confidence_level(confidence)
                name = 'Random Forest'
                final_result = 'Image is classified as "' + predict[0] + '" with ' + accuracy + ' probability'+'\n using "'+ name + '"'
                self.sentiment.setText(final_result)
                self.make_list(prediction, accuracy, name)

        if self.box5.isChecked() and self.file_path != "":
            flag = 1
            with open('model_xgBoost.pickle', 'rb') as f:
                model_xgb = pickle.load(f)
            self.data(ml=True)
            if np.array_equal(self.ml_rawImages[-1], "No Face"):
                self.no_face()
            else:
                predict = model_xgb.predict(self.ml_rawImages)
                prediction = predict[0]
                confidence = model_xgb.predict_proba(self.ml_rawImages)
                
                accuracy = self.confidence_level(confidence)
                name = 'XGBoost'
                final_result = 'Image is classified as "' + predict[0] + '" with ' + accuracy + ' probability'+'\n using "'+ name + '"'
                self.sentiment.setText(final_result)
                self.make_list(prediction, accuracy, name)

        else:
            if flag == 0 and not comparision:               ##  shows error in terms of not selecting image or a classifier.
                warning = "Invalid Input!!!"
                message = "You have to select an Image and a Classifier"
                self.show_popup(warning, message)
            elif flag == 0 and comparision:                 ##  shows error in terms of not selecting image or at least 2 classifiers.
                warning = "Invalid Input!!!"
                message = "You have to select an Image and at least 2 Classifiers"
                self.show_popup(warning, message)
            else:
                pass
        
        
    ###  Sub-main file that find out faces from the image and calculate..............................................
    def data(self, cnn=False, ml=False):

        detector = MTCNN()        
        ml_rawImages = []
        cnn_rawImages = []

        image = cv2.imread(self.file_path)[:,:,::-1]        ##  reads image in RGB format.
        detect = image.copy()                           ##  makes copy of the loaded image.

        faces = detector.detect_faces(image)            ##  detects faces using MTCNN detector.

        if list(faces):
            
            twidth, theight = 0, 0
            for face in faces:                          ##  selects one face from multiple faces.
                x, y, width, height = face['box']

                if width > twidth and height > theight:
                    twidth, theight = width, height
                    x2, y2 = x + twidth, y + theight
                    # draw a rectangle over the pixels
                    rectangle(detect, (x, y), (x2, y2), (0,255,0), 3)
                    self.detect = detect
                    roi_image = image[y:y2, x:x2]       ##  crop ROI portion from image

            self.roi = roi_image                    ##  sets global "roi" variable for displaying.
            roi_image = roi_image[:,:,::-1]                            ##  converts RGB to BGR image.
            roi_gray = cv2.cvtColor(roi_image, cv2.COLOR_BGR2GRAY)          ##  converts into gray scale imge.

            selem = disk(20)
            eroded = erosion(roi_gray, selem)           ##  for eroision.
            self.eroded = eroded                    ##  sets global "eroded" variable for displaying.
            roi_subtracted = roi_gray - eroded          ##  for subtracting image.
            self.subtracted = roi_subtracted

            if cnn:                     ##  for CNN model.
                roi_subtracted = cv2.resize(roi_subtracted, (120, 120))            ##  to resize loaded image.
                cnn_rawImages.append(np.array(roi_subtracted))              ##  creates cnn_rawImages list.
                cnn_rawImages = np.array(cnn_rawImages)                 ##  converts list to array.
                cnn_rawImages = cnn_rawImages.reshape(cnn_rawImages.shape[0], cnn_rawImages.shape[1], cnn_rawImages.shape[2], 1)
                self.cnn_rawImages = cnn_rawImages / 255
            elif ml:                        ##  for ML models.
                size = (150, 150)
                pixels = cv2.resize(roi_subtracted, size).flatten()     ##  to resize loaded image and flatten() creats 1D array.
                ml_rawImages.append(pixels)
                self.ml_rawImages = np.array(ml_rawImages)
            else:
                pass
            
            return detect
        else:
            self.ml_rawImages.append("No Face")
            self.cnn_rawImages.append("No Face")  


    



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Main = QtWidgets.QMainWindow()
    ui = Ui_Main()
    ui.setupUi(Main)
    Main.show()
    sys.exit(app.exec_())
